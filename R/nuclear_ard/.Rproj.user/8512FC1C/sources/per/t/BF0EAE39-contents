# This file contains general purpose functions on matrices. Specifically,
# the nuclear norm of a matrix and the trace of a matrix. 

#' Nuclear norm of a matrix
#' 
#' \code{nuclear_norm} calculates the nuclear norm 
#' for a single matrix. This is the Schatten norm in
#' the case of p = 1.
#' 
#' Because this is a nuclear norm, the function requires
#' input to be a matrix to avoid incorrect implementation.
#' 
#' @seealso More information on the nuclear norm can be found at 
#'  \url{https://en.wikipedia.org/wiki/Matrix_norm#Schatten_norms}.
#' 
#' 
#' @param mat A matrix object. This can be a dcgMatrix from Matrix package.
#' @return The nuclear norm of \code{mat}. This is a numeric, scalar value.
#' @examples
#' nuclear_norm(matrix(1, nrow=3, ncol=3))
#' 
#' A <- matrix(2, nrow=4, ncol=2)
#' nuclear_norm(A)
#' 
#' B <- Matrix::Matrix(1, nrow=3, ncol=3)
#' nuclear_norm(B)
#' 
#' \dontrun{
#' nuclear_norm(c(A, B))
#' nuclear_norm(c(1,2,3))
#' }
#' @export
#' @import Matrix
nuclear_norm <- function(mat) {
	# Before proceeding, must check that mat meets requirements.
	if (!any(c("matrix", "Matrix", 'dgeMatrix') %in% class(mat))) {
		stop("Input for nuclear_norm must be of class 'matrix'.
				Inputted object is of class ", class(mat))
	}

	# First, do singular value decomposition
	mat.svd <- svd(mat)
	# Next, get norm by summing singular values (element 'd' in list).
	nuc.norm <- sum(mat.svd$d)
	return(nuc.norm)
}

#' Trace of a matrix
#' 
#' \code{matrix_trace} calculates the trace of
#' a single square (n x n) matrix. 
#' 
#' 
#' @seealso More information on the trace of a matrix can be found at 
#'  \url{https://en.wikipedia.org/wiki/Trace_(linear_algebra)}.
#' 
#' 
#' @param mat A matrix object. This can be a dcgMatrix from Matrix package. Must be have square dimensions.
#' @return The trace of \code{mat}. This is a numeric, scalar value.
#' @examples
#' matrix_trace(matrix(1, nrow=3, ncol=3))
#' 
#' A <- matrix(2, nrow=4, ncol=4)
#' matrix_trace(A)
#' 
#' B <- Matrix::Matrix(1, nrow=3, ncol=3)
#' matrix_trace(B)
#' 
#' \dontrun{
#' A <- matrix(2, nrow=2, ncol=4)
#' matrix_trace(A)
#' 
#' matrix_trace(c(A, B))
#' matrix_trace(c(1,2,3))
#' }
#' @export
#' @import Matrix
matrix_trace <- function(mat) {
    # Before proceeding, must check that mat meets requirements.
    if (!any(c("matrix", "Matrix", 'dgeMatrix') %in% class(mat))) {
        stop("Input for matrix_trace must be of class 'matrix'.
                Inputted object is of class ", class(mat))
    } else if (nrow(mat) != ncol(mat)){
        stop("Input for matrix_trace must be a square matrix. 
                Dimensions of inputted matrix are:", dim(mat))
    }

	trace <- sum(diag(mat))
	return(trace)
}